# Copyright (C) 2025 Eclipse Foundation and others. 
# 
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0.
# 
# SPDX-FileType: SOURCE
# SPDX-FileCopyrightText: 2025 Eclipse Foundation
# SPDX-License-Identifier: EPL-2.0

name: 'tsffer'
description: 'TSF transfer action - uploads a file to a GitHub release and generates a manifest.'
branding:
  icon: 'link-2'
  color: 'gray-dark'
  
inputs:
  github_token:
    description: 'GitHub token.'
    required: true
    default: ${{ github.token }}
  file:
    description: 'Local file to upload.'
    required: true
  file_glob:
    description: 'If true the file can be a glob pattern, asset_name is ignored if this is true.'
  tag:
    description: 'Tag of the release to upload to.'
    required: true
    default: ${{ github.ref }}
  asset_name:
    description: 'Name of the asset. When not provided will use the file name.'
  asset_description:
    description: 'More detailed description of the asset (Default: `""`).'
  asset_type:
    description: 'Type of the asset; free-text field that might be used to e.g. declare an asset to be of type DOCUMENTATION, SOURCE, etc (Default: `""`).'
  asset_tsf_ids:
    description: 'List of TSF identifiers that this asset pertains to; can be one or more identifiers separated by commas (Default: `""`).'

outputs:
  release_asset_url:
    description: 'Download url of the release asset.'
    value: ${{ steps.upload_asset.outputs.browser_download_url }}
  release_asset_manifest_url:
    description: 'Download url of the release asset manifest.'
    value: ${{ steps.upload_asset_manifest.outputs.browser_manifest_url }}

runs:
  using: 'composite'
  steps:
    - name: Install jq
      run: |
        set -e
        sudo apt-get update
        sudo apt-get install -y jq
      shell: bash

    - name: Cache jq install
      uses: actions/cache@v3
      with:
        path: /usr/bin/jq
        key: jq-cache
        
    - name: Upload release asset to release
      uses: svenstaro/upload-release-action@v2
      id: upload_asset
      with:
        repo_token: ${{ inputs.github_token }}
        file: ${{ inputs.file }}
        file_glob: ${{ inputs.file_glob }}
        tag: ${{ inputs.tag }}

    - name: Generate asset manifest
      id: generate_manifest
      run: |
        #set -e

        echo "${{ steps.upload_asset.outputs.browser_download_url }}"

        # if [ "${{ inputs.file_glob }}" = 'true' ]; then
        #   asset_file=$(basename "${{ steps.upload_asset.outputs.browser_download_url }}")
        # else
        #   asset_file="${{ inputs.file }}"
        # fi

        # # Set asset_name to equal file name (sans any path information), if empty
        # if [ -z "${{ inputs.asset_name }}" ]; then
        #   asset_name=$(basename "$asset_file")
        # else
        #   asset_name="${{ inputs.asset_name }}"
        # fi

        # # Manifest output filename - release artifact name with appended '.tsffer' 
        # generated_file="$asset_file.tsffer"

        # # Calculate sha256 checksum for asset file
        # asset_checksum=$(sha256sum "$asset_file" | awk '{print $1}')

        # # Generate json manifest for asset, write to output file
        # jq -n \
        # --arg checksum "$asset_checksum" \
        # --arg description "${{ inputs.asset_description }}" \
        # --arg download_url "${{ steps.upload_asset.outputs.browser_download_url }}" \
        # --arg name "$asset_name" \
        # --argjson tsf_ids "$(echo ${{ inputs.asset_tsf_ids }} | jq -R 'split(",")')" \
        # --arg type "${{ inputs.asset_type }}" \
        # --arg by_workflow "$GITHUB_WORKFLOW" \
        # --arg commit_sha "$GITHUB_SHA" \
        # --arg ref "$GITHUB_REF" \
        # --arg repository "$GITHUB_REPOSITORY" \
        # '{
        #     "asset-info": {
        #         "checksum-sha256": $checksum,
        #         "description": $description,
        #         "download-url": $download_url,
        #         "name": $name,
        #         "tsf-ids": $tsf_ids,
        #         "type": $type
        #     },
        #     "context-info": {
        #         "by-workflow": $by_workflow,
        #         "commit-sha": $commit_sha,
        #         "ref": $ref,
        #         "repository": $repository
        #     }
        # }' > $generated_file
        echo "browser_manifest_url=$generated_file" >> $GITHUB_OUTPUT
      shell: bash

    # - name: Upload release asset manifest to release
    #   uses: svenstaro/upload-release-action@v2
    #   id: upload_asset_manifest
    #   with:
    #     repo_token: ${{ inputs.github_token }}
    #     file: ${{ steps.generate_manifest.outputs.browser_manifest_url }}
    #     tag: ${{ inputs.tag }}
